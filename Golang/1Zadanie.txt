package main

import (
	"fmt"
)

// Функция minOperations принимает входную строку и возвращает мини-мальное количество операций
// для приведения строки к последовательности символов без повторений.
func minOperations(inputString string) int {
	n := len(inputString)          // Получаем длину входной строки
	dp := make([]int, n+1)         // Создаем массив для хранения результа-тов подзадач
	lastOccurrence := make(map[byte]int) // Создаем карту для хранения индексов последнего вхождения символов

	for i := 1; i <= n; i++ { // Итерируем по всем символам входной строки
		dp[i] = dp[i-1] + 1 // Инициализируем текущий результат как результат предыдущей операции + 1

		// Если символ уже встречался, обновляем текущий результат, используя индекс последнего вхождения символа
		if idx, ok := lastOccurrence[inputString[i-1]]; ok {
			dp[i] = min(dp[i], dp[idx]+1)
		}

		lastOccurrence[inputString[i-1]] = i // Обновляем индекс последнего вхождения символа
	}

	return dp[n] // Возвращаем результат для всей строки
}

// Функция min возвращает минимальное из двух чисел.
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	var inputString string
	fmt.Print("Введите строку: ")
	fmt.Scanln(&inputString) // Запрашиваем строку у пользователя
	fmt.Println("Минимальное количество операций:", minOpera-tions(inputString)) // Выводим результат работы функции minOperations
}

